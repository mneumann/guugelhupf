#!/usr/bin/env ruby
#
# Copyright (c) 2001, 2002 Michael Neumann <neumann@s-direktnet.de>
# 
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions 
# are met:
# 1. Redistributions of source code must retain the above copyright 
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright 
#    notice, this list of conditions and the following disclaimer in the 
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
# THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

require "tempfile"

# TODO: load FILE-TYPE-LIST from file
FILE_TYPE_LIST = [
  ["application/msword", proc{|f, t| `catdoc '#{f}' > '#{t}'`}],
  ["text/html", proc{|f, t| `lynx -dump '#{f}' > '#{t}'`}],
  ["application/postscript", proc{|f, t| `ps2ascii '#{f}' > '#{t}'`}],
  ["application/pdf", proc{|f, t| `ps2ascii '#{f}' > '#{t}'`}],
  ["image/*", :REJECT],
  ["audio/*", :REJECT],
  ["video/*", :REJECT],
  ["*/*",    :ASIS]
]

class Dir
  def Dir.recurse(dir, command)
    Dir[File.join dir, "*"].each do |f|
      if FileTest.directory? f
        Dir.recurse(f, command)
      elsif FileTest.file? f
        command.call(f)
      end
    end
  end
end

module MIME
=begin
  def MIME.parse(str)
    mime, *attrs = str.split(";")
    h = {}
    attrs.each do |a| 
      k, v = a.split("=")
      h[k.strip] = v.strip
    end
    [mime.strip, h]
  end
=end
  def MIME.parse(str)
    if str =~ /^\s*([-\w\/_]+)/
       mime = $1
       [mime, {}]
     else
       raise "malformed MIME"
    end
  end
  def MIME.match(mime, pattern)
    x, y = mime.split("/")
    p, q = pattern.split("/")

    b1 = (p == "*" ? true : p == x)
    b2 = (q == "*" ? true : q == y)

    b1 && b2
  end
  def MIME.file(filename)
    MIME.parse(`file -i -b '#{filename}'`)
  end
end

class Tempfile
  def self.tempname
    o = new("gh")
    o.close
    o.path
  end
end

def convert(filename)
  mime, _ = MIME.file(filename)
  STDERR.puts "= file #{filename} recognized as #{mime}"

  FILE_TYPE_LIST.each do |pattern, action|
    if MIME.match(mime, pattern) then
      return \
      case action
      when :ASIS 
        STDERR.puts "! accepted asis"
        filename
      when :REJECT 
        STDERR.puts "! rejected"
        nil
      when Proc 
        STDERR.puts "! convert"
        tmpfile = Tempfile.tempname
        action.call(filename, tmpfile)
        tmpfile
      else
        raise 
      end
    end
  end

  raise
end

if __FILE__ == $0

  def usage
    STDERR.puts "#$0 [directory]"
  end

  def process(file)
    new_file = convert(file)
    STDOUT.puts "#{new_file}\t#{file}" if new_file
  end

  if ARGV.size > 1
    usage
    exit -1
  end

  dir = ARGV[0]

  if dir
    Dir.recurse(dir, proc {|f| process(f)}) 
  else
    STDIN.each do |f|
      f.chomp!
      process(f) if FileTest.file? f
    end
  end

end
